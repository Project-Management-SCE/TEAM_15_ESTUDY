
pipeline {
  agent none
    stages{
        stage('Install requirements'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
                    dir("jenkins") {
			sh 'python -m pip install --upgrade pip --user'
			sh 'python -m pip install -r requirements.txt'
		}
                    dir("Estudy_Project") {
// 			sh 'pip install django-phonenumber-field'
// 			sh 'pip install django-recaptcha'
// 			sh 'pip install django-star-ratings'
			sh 'pip install coverage'
			sh 'python manage.py makemigrations'
			sh 'python manage.py migrate'
		}
	       	    
                    sh 'python -m pip install django==2.1.15'
                }
            }
        }
        stage('Compile'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
			 sh 'python -m compileall TEAM_15_ESTUDY//'
                    	 sh 'pip install django_jenkins'
                }
            }
        }
        stage('Run Unit Tests'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
		 withEnv(["HOME=${env.WORKSPACE}"]){
		    dir("Estudy_Project"){
			   sh 'python -m coverage run -a manage.py test --tag=unit-test'
                    }
		}
            }
         }
	 stage('Run Integration Tests') {
	     agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps {
	  	 withEnv(["HOME=${env.WORKSPACE}"]){
			dir("Estudy_Project") {
		     	 	sh "python -m coverage run -a manage.py test --tag=integration-test"
		    	}
		 }
	     }
        }
	stage('Coverage Report'){
		agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps {
		withEnv(["HOME=${env.WORKSPACE}"]){
			dir("Estudy_Project") {
				sh 'python -m coverage report --ignore-errors'
		    	}	     
		}
	    }
	}
	stage('Metric 2 - pylint python code convention') {
		agent{
                	docker{
                    		image 'python:3.7'
                	}
           	 }
		steps {
			withEnv(["HOME=${env.WORKSPACE}"]){
				dir("Estudy_Project") {
					sh 'pip install pylint'
					sh 'python -m pylint Estudy_Project'
					}
				}
			}
		}
		
// 	stage('Metric 3 - Test Trend Chart') {
// 		steps {
// 			dir("Estudy_Project") {
// 				withEnv(["HOME=${env.WORKSPACE}"]) {
// 					sh "python -m coverage run -a manage.py test"
// 				}
// 			}
// 			dir("Estudy_Project") {
// 				junit allowEmptyResults: true, testResults: 'test_reports/unittest.xml'
// 			}
// 		}
// 	}
    }
}


